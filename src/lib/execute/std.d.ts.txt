/// <reference no-default-lib="true"/>
/// <reference lib="esnext"/>

/* eslint no-redeclare: 0 */
/* eslint @typescript-eslint/no-namespace: 0 */
/* eslint @typescript-eslint/no-unused-vars: 0 */

/**
 * A chance of 0 never happens, a chance of 1 always happens.
 * 
 * @example
 * ```javascript
 * if(chance(0.5))
 * if(chance(1 / 2))
 * ```
 */
declare function chance(decimal: number): boolean;

/**
 * In seconds
 */
declare function silence(durationSeconds: number): song;

type song = { readonly __dontdependonthis: true };
type YouTubeVideo = {
    id: string
    start?: number
    end?: number
};
type SongLike = song | string | YouTubeVideo;
declare function fromSongLike(songLike: SongLike): song;

type playlist = Iterable<SongLike> | (() => Iterable<SongLike>);
declare const Playlist: {
    yield(playlist: playlist): void
    yield(name: string, playlist: playlist): void

    readonly input: {
        string(label: string): string
        strings(): string[]
        number(label: string): number
        boolean(label: boolean): boolean
        options<T>(options: [string, T][]): T
    }
};

interface Array<T> {
    /**
     * Pure Fisher-Yates Knuth shuffle (not in-place).
     */
    shuffle(): T[]

    /**
     * Splits the array at @param index, leaving the item at `index` in the second array.
     * 
     * @example
     * ```javascript
     * [0, 1, 2].split(1) // => [ [0], [1, 2] ]
     * ```
     */
    split(index: number): [T[], T[]]

    /**
     * Moves everything before @param index to the back of the array.
     * 
     * @example
     * ```javascript
     * [0,1,2,3].rehead(2) // => [2,3,0,1]
     * ```
     */
    rehead(index: number): T[]

    /**
     * More useful `sort()`, enabling stuff like:
     * 
     * @example
     * ```javascript
     * // Shuffle array, but move each item no more than 2 spaces
     * [0,1,2,3].mapsort(
     *    (item, index) => index + Math.random(-1, 1),
     *    (a, b) => a - b
     * )
     * ```
     */
    mapsort<TTransformed>(
        map: (item: T, index: number, array: T[]) => TTransformed,
        compare?: (a: TTransformed, b: TTransformed) => number | boolean,
    ): T[]

    /**
     * Picks and returns @param n elements.
     */
    pick(map?: (item: T) => number): T | undefined
    pick(n: number, map?: (item: T) => number): T[]
}

interface Math {
    random(max: number): number
    random(min: number, max: number): number
}

interface Map<K, V> {
    toArray(): [K, V][]
}

interface Set<T> {
    toArray(): T[]
}