/// <reference no-default-lib="true"/>
/// <reference lib="es6"/>

/* eslint @typescript-eslint/no-namespace: 0 */

/**
 * @example ```chance(0.5) // 50%```
 * @example ```chance(1 / 4) // "one in four"```
 */
declare function chance(decimal: number): boolean;

declare namespace Playlist {
    export type List = string[];

    /**
     * Call these only at the top of your main function, and *make sure
     * they are called in the same order every time*
     */
    export const input: {
        boolean(label: string): boolean,
        options(label: string, options: string[]): boolean[],
        options(label: string, ...labels: string[]): boolean[],
        number(label: string): number,
        string(label: string): string,
    };

    /**
     * Can be called multiple times. If so, use `name` to differentiate the different outputs.
     */
    export function yield(list: List): void
    export function yield(name: string, list: List): void
}

declare interface Array<T> {
    readonly first: T,
    readonly last: T,
    shuffle(): void,
    /**
     * Makes the element at @param index the new index 0 by
     * moving all the elements before @param index to the back of the array, maintaining order.
     * 
     * @example
     * ```javascript
     * [0,1,2,3,4,5].rehead(2); // => [2,3,4,5,0,1]
     * ```
     */
    rehead(index: number): T[],
    sort(type: 'weighed', callback: (item: T, index: number, array: T[]) => number): T[]
}

declare interface Math {
    /**
     * Returns a number between [0, @param range)
     */
    random(range: number): number
    /**
     * Returns a number between [@param low and @param high)
     */
    random(low: number, high: number): number
}